-- 온라인 상품 정보: ONLINE_SALE 
-- 오프라인 상품 정보: OFFLINE_SALE (USER_ID 없음)
-- 2022년 3월 오프라인.온라인 상품 판매 데이터 출력, OFFLINE_SALE에선 null로
-- 판매일 기준 오름차순
-- 판매일이 같으면? 상품 ID 기준 오름차순
-- 판매일, 상품ID 동일? 유저 ID 오름차순
# select date_format(online_sale.sales_date,'%Y-%m-%d') as SALES_DATE, online_sale.PRODUCT_ID, online_sale.USER_ID, online_sale.SALES_AMOUNT
# from ONLINE_SALE 
# left outer join OFFLINE_SALE on ONLINE_SALE.SALES_DATE=OFFLINE_SALE.SALES_DATE
# WHERE online_sale.sales_date between '2022-03-01 00:00:00' and '2022-03-31 00:00:00'
# order by field(sales_date,product_id,user_id);

# select * 
# from 
#     (select sales_date,product_id,sales_amount from online_sale
#     where sales_date between '2022-03-01 00:00:00' and '2022-03-31 00:00:00'
#     union all
#     select sales_date,product_id,sales_amount from offline_sale
#     where sales_date between '2022-03-01 00:00:00' and '2022-03-31 00:00:00');
    
# 완성 코드
SELECT DATE_FORMAT(SALES_DATE, '%Y-%m-%d') AS SALES_DATE, PRODUCT_ID,USER_ID,SALES_AMOUNT  FROM ONLINE_SALE
WHERE SALES_DATE BETWEEN '2022-03-01' AND '2022-03-31'
UNION ALL
SELECT DATE_FORMAT(SALES_DATE, '%Y-%m-%d'), PRODUCT_ID, NULL AS USER_ID, SALES_AMOUNT  FROM OFFLINE_SALE
WHERE SALES_DATE BETWEEN '2022-03-01' AND '2022-03-31'
ORDER BY SALES_DATE ASC, PRODUCT_ID ASC, USER_ID ASC;

 # 2022-03-01 00:00:00 을 2022-03-01로 변환 --> DATE_FROMAT() 사용
 # WHERE 조건에서 2022-03-32를 하면 오류가 발생한다. 의미 없는 숫자를 제한한 것으로 보인다
 # UNION의 조건은, 컬럼 수와 타입이 동일해야 한다. OFFLINE_SALE에는 USER_ID 컬럼이 없다. 따라서 SELECT NULL로 컬럼을 만들어주고 별명으로 USER_ID를 설정해준다
 # UNION을 시행했을 때 컬럼에 데이터가 없으면 NULL을 채워준다
 # SELECT NULL; 을 해보면, NULL이란 컬럼이 생성되는 것을 확인할 수 있다
 # ORDER_BY의 조건이 여러개일 땐 우선순위대로 나열해주면 차례대로 정렬될 것이다